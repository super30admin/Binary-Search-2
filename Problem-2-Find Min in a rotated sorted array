// Time complexity = O(logn)
// Space complexity = O(1)
// Executed the code on leetcode
//
//Explanation - Binary search is used - If the pivot is around the mid, we return mid or mid+1; else we search in the non sorted side of the array.
class Solution {
    public int findMin(int[] nums) {

        int low = 0;
        int high = nums.length - 1;
        if(nums == null ) return -1;
        if(nums.length == 1) return nums[0];

        if(nums[low] <= nums[high]){
                return nums[low];
        }
        while(low <= high){
            int mid = low + (high - low)/2;
           
            if(nums[mid] > nums[mid + 1]) return nums[mid + 1];
            if(nums[mid] < nums[mid - 1]) return nums[mid];

            if(nums[low] >= nums[mid]) {
                high = mid - 1;
            } else if(nums[mid] >= nums[high]) {
                low = mid + 1;
            }
        }
     return -1;   
    }
}
