//Time Complexity O(Log n)
//LeetCode tested

class SearchPeakElement {
    
    public static int findPeakElement(int[] nums) {
        int n=nums.length;
        if(nums.length ==1)
            return 0;

        else if(nums.length == 2){
            if(nums[0]>nums[1])
                return 0;
            else
                return 1;
        }
        else{
            if(nums[0]>nums[1])
                return 0;
            if(nums[n-1]>nums[n-2])
                return n-1;
        }
        int left=0,right=n-1,mid=0;

        while(left<=right){
            mid=left+((right-left)/2);
            if(mid == 0)
                mid=1;
            else if (mid == n-1)
                mid=n-2;
            //System.out.println("left "+left+" right "+right+" mid "+mid);
            if(mid!=0 && mid!=n-1 && nums[mid] > nums[mid+1] && nums[mid] > nums[mid-1]){
                return mid;
            }else if(mid!=0 && mid!=n-1 && nums[mid] < nums[mid+1]){
                left=mid+1;
            }else if(mid!=0 && mid!=n-1 && nums[mid] < nums[mid-1]){
                right=mid-1;
            }
        }
        return -1;
    }    
    
}