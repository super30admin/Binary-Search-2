// Time Complexity :O(log(n))
// Space Complexity :O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No


// Your code here along with comments explaining your approach

class Solution {
    public int[] searchRange(int[] nums, int target) {
        if(nums == null || nums.length == 0) return new int[] {-1,-1};
        if(target < nums[0] || target > nums[nums.length - 1]) return new int[] {-1,-1};
        int first = binaryFirstOccurence(nums,target);
        if(first == -1)
        {
            return new int [] {-1,-1};
        }
        int last = binarylastOccurence(nums,target,first);
        return new int[] {first,last};
        
        
    }

 private int binaryFirstOccurence(int[] nums, int target)
{
   int low = 0;
   int n = nums.length;
   int high = n - 1;
   while(low <= high)
   {
      int mid = low + (high-low)/2 ;
      if(nums[mid]==target)
      {
        if(mid == low ||nums[mid] > nums[mid-1])
        {
            return mid;
        }
        high = mid -1;         
      }
      else if(target < nums[mid])
      {
          high = mid - 1;
      }
      else
      {
          low = mid + 1;
      }
       
    }
    return -1;
}

private int binarylastOccurence(int[] nums, int target,int first)
{
   int low = first;
   int n = nums.length;
   int high = n - 1;
   while(low <= high)
   {
      int mid = low + (high-low)/2 ;
      if(nums[mid]==target)
      {
        if(mid == high || nums[mid+1] > nums[mid])
        {
            return mid;
        }
        low = mid + 1;         
      }
      else if(target < nums[mid])
      {
          high = mid - 1;
      }
      else
      {
          low = mid + 1;
      }
       
    }
    return -1;
}
}