# Time Complexity : O(logn)
# Space Complexity : O(1)
# Did this code successfully run on Leetcode : yes 
# Any problem you faced while coding this : no

# create 2 functions to get the first element and the last element
# for first function if the mid is greater than mid - 1 move high to mid - 1 and look for first occurance


class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        if not nums:
            return [-1,-1]

        first = self.binarysearchfirst(nums,target)
        if first == -1:
            return [-1,-1]
        second = self.binarysearchsecond(nums,target)
        return [first,second]

    def binarysearchfirst(self,nums: List[int], target: int) -> int:

        low = 0
        high = len(nums) - 1

        while low <= high:
            mid = (high+low) // 2
            if nums[mid] == target:
                if mid == 0 or nums[mid] > nums[mid - 1]:
                    return mid
                
                high = mid - 1

            elif target < nums[mid]:
                high = mid - 1
            else:
                low = mid + 1
        return -1


    def binarysearchsecond(self,nums: List[int], target: int) -> int:

        low = 0
        high = len(nums) - 1
        
        while low <= high:
            mid = (high+low) // 2
            if nums[mid] == target:
                if mid == len(nums) - 1 or nums[mid] < nums[mid + 1]:
                    return mid
                
                low = mid + 1
            elif target < nums[mid]:
                high = mid - 1
            else:
                low = mid + 1
        return -1
