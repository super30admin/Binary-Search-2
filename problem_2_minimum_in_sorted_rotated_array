class Solution(object):
    def findMin(self, nums):
        """
        Time Complexity = O(log n) - since we are doing binary search
        Space Complexity = O(1) - constant space

        Did this code successfully run on Leetcode: Yes
    
        Any problem you faced while coding this: Understanding the boundary conditions. 
        Played around with the test cases:
        [3,1]
        [1,3]
        """
        left, right = 0, len(nums) - 1
        # Basic conditions check 
        # 1. length of array = 1
        # 2. Array is already sorted when the very first element < last element.
        if (len(nums) == 1) or (nums[0] < nums[right]) :
            return nums[0]

        # Binary search in the search space bounded by left, right
        while right >= left:
            # mid element
            mid = left + (right - left )/2
            print('right=', right, ' left=', left, ' mid=', mid)
            # Condition 1: return logic
            # Check that mid is the minimum by comparing it with its adjacent neighbors
            if nums[mid] < nums[mid-1]:
                return nums[mid]
            if nums[mid] > nums[mid+1]:
                return nums[mid+1]

            # Condition 2: search in RIGHT search space.
            #              We search in RIGHT side, when we slide the left pointer to the right of mid => mid+1
            if nums[0] < nums[mid]:
                left = mid + 1 
            # Condition 3: search in LEFT search space
            #              We search in LEFT side, when we slide the right pointer to the left of mid => mid-1
            else:
                right = mid - 1
        
