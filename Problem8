// Time Complexity :o(logn)
// Space Complexity :o(1)
// Did this code successfully run on Leetcode :yes
// Any problem you faced while coding this :no


// Your code here along with comments explaining your approach

class Solution {
    public int[] searchRange(int[] nums, int target) { 
       int[] result=new int[2];
        result[0]=findStartingIndex(nums,target);
        result[1]=findEndingIndex(nums,target);
        return result;
    }
    
    public int findStartingIndex(int[] nums,int target){
        int index=-1;
        int start=0;
        int end=nums.length-1;
        
        while(start<=end){
            
            int mid=start+(end-start)/2;
            
            if(nums[mid]>=target){
                
                end=mid-1;
            }else {
                start=mid+1;
            }
            if (nums[mid]==target) index=mid;  
        }
       return index; 
        
    }
    public int findEndingIndex(int[] nums,int target){ 
        int index=-1;
        int start=0;
        int end=nums.length-1;
        
        while(start<=end){
            
            int mid=start+(end-start)/2;
            
            if(nums[mid]<=target){
                
                start=mid+1;
            }else {
                end=mid-1;
            }
            if (nums[mid]==target) index=mid;  
        }
       return index; 
        
    }
}
