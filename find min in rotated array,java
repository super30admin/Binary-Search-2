// Time Complexity : O(log(n))
// Space Complexity : O(n)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no


// Your code here along with comments explaining your approach

class Solution {
    private int binarySearchMin(int [] nums){
        int l = 0;
        int h = nums.length - 1;
        while(l <= h){
            //int mid = l + (h-l)/2;
            if(nums[l] < nums[h]) return nums[l];
            int mid = l + (h-l)/2;
            if((mid == 0 || nums[mid] < nums[mid -1]) && (mid == nums.length - 1 || nums[mid] < nums[mid+1])  ){
                return nums[mid];
            }
            else if(nums[l] <= nums[mid]){
                l = mid + 1;
            }
            else{ // left side of the array resides the min 
                h = mid - 1;
            }
        }
        return -1;
    }
    public int findMin(int[] nums) {
        if(nums.length == 0 || nums == null) return -1;
        int f = binarySearchMin(nums);
        return f;
    }
}