// Time Complexity : O(log n) - 2 Binary search is performed to find element   (O(log n) + O(log n)): O(log n)
// Space Complexity : O(1) - No extra space is used
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach

class Solution {
    public int[] searchRange(int[] nums, int target) {
        int left = leftSearch(nums,target);
        if(left == -1){
            return new int[] {-1,-1};
        }
        int right = rightSearch(nums,target);
        
        return new int[]{left,right};
    }
    
    private int leftSearch(int[] nums,int target){
        int left = 0;
        int right = nums.length-1;
        
        while(left<=right){
            int mid = left + (right - left)/2;
            
            if(nums[mid] == target){
                if(mid == left || nums[mid-1] != target){
                    return mid;
                }
                right = mid-1;
            }else if(nums[mid] > target){
                right = mid -1;
            }else{
                left = mid +1;
            }
        }
        
        return -1;
    }
    
    private int rightSearch(int[] nums,int target){
        int left = 0;
        int right = nums.length-1;
        
        while(left<=right){
            int mid = left + (right - left)/2;
            
            if(nums[mid] == target){
                if(mid == right || nums[mid+1] != target){
                    return mid;
                }
                left = mid +1;
            }else if(nums[mid] < target){
                left = mid +1;
            }else{
                right = mid -1;
            }
        }
        
        return -1;
    }
}

