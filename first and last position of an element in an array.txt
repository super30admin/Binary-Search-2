class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        #null case
        if nums == None or len(nums) == 0:
            return [-1,-1]
        
        if nums[0] > target or nums[len(nums) - 1] < target:
            return [-1,-1]
        
        first = self.BinarySearchLeft(nums,0,len(nums) - 1, target)
        if first == -1:
            return [-1,-1]
        last = self.BinarySearchRight(nums,first,len(nums)-1, target)
        return [first,last]
        
    def BinarySearchLeft(self,nums,low,high,target):
        while (low <= high):
            mid = (low + high)//2
            if nums[mid] == target:
                #determine if its the very first occurence
                if mid == 0 or nums[mid-1] < target :
                    return mid
                else:
                    high = mid - 1
            elif nums[mid] > target:
                high = mid - 1
            else:
                low = mid + 1
                
        return - 1
    
    
    def BinarySearchRight(self,nums,low,high,target):
        while (low <= high):
            mid = (low + high)//2
            if nums[mid] == target:
                #determine if its the very last occurence
                if mid == len(nums) - 1 or nums[mid+1] > nums[mid]:
                    return mid
                else:
                    low = mid + 1
            elif nums[mid] > target:
                high = mid - 1
            else:
                low = mid + 1
                
        return - 1
    
    
    
    
    
        
        
        
        
        