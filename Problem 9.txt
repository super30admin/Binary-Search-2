// Time Complexity :O(log n)

// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : n/a


// Your code here along with comments explaining your approach : define 2 functions to find the first and the last index.



class Solution {
    private int binarySerachFirst(int[] nums,int target){
        int low=0;
        int high=nums.length-1;
        int n=nums.length;
        while(low<=high){
            int mid=low+(high-low)/2;
            if(nums[mid]==target)
            {
                if(mid==0 || nums[mid]>nums[mid-1])
                {
                    return mid;
                }else
                {
                    high=mid-1;
                }
            }else if(nums[mid]>target){
                high=mid-1;
            }
            else
            low=mid+1;
        }
        return -1;
    }

    private int binarySerachLast(int[] nums,int target,int first){
        int low=first;
        int high=nums.length-1;
        int n=nums.length;
        while(low<=high){
            int mid=low+(high-low)/2;
            if(nums[mid]==target)
            {
                if(mid==n-1 || nums[mid]<nums[mid+1])
                {
                    return mid;
                }else
                {
                    low=mid+1;
                }
            }else if(nums[mid]>target){
                high=mid-1;
            }
            else
            low=mid+1;
        }
        return -1;
    }


    public int[] searchRange(int[] nums, int target) {
        int n=nums.length;
        if(nums.length==0 || nums==null){
             return new int[] {-1,-1};
        }
        if (nums[0]>target || nums[n-1]<target) return new int[] {-1,-1};
        
        
        int first=binarySerachFirst(nums,target);
        if(first==-1) return new int[] {-1,-1};
        int last=binarySerachLast(nums,target,first);
        return new int[] {first,last};
        
    }
}