// Time Complexity : log n
// Space Complexity : constant
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this :
edge case 

// Your code here along with comments explaining your approach
class Solution {
    
     public int[] searchRange(int[] nums, int target) {
        
        if(nums == null || nums.length ==0)
            return new int[]{-1,-1};
        
        if(target< nums[0] || target > nums[nums.length-1])
            return new int[]{-1,-1};
        
        int first = firstOcc(nums, target);
        int second = lastOcc(nums, target);
        return new int[]{first, second};
             
     }
     private int firstOcc(int[] nums, int target)
    {
       int l=0, r = nums.length -1;
         
        while(l <= r)
        {
            int mid = l +(r-l)/2;
            if((target == nums[mid]))
            {
                if(mid == 0 || nums[mid-1] < nums[mid])
                {
                     return mid;
                }
                else if (nums[mid-1] == nums[mid])
                {
                    r = mid -1;
                }
            }
            else if (target > nums[mid])
                l = mid+1;
           else
               r = mid - 1;
        }
        return -1;
    }
    
      private int lastOcc(int[] nums, int target)
    {
       int l=0, r = nums.length -1;
         
        while(l <= r)
        {
            int mid = l +(r-l)/2;
            if((target == nums[mid]))
            {
                if(mid == nums.length-1 || nums[mid+1] > nums[mid])
                {
                     return mid;
                }
                else if (nums[mid+1] == nums[mid])
                {
                    l = mid +1;
                }
            }
            else if (target > nums[mid])
                l = mid+1;
           else
               r = mid - 1;
        }
        return -1;
    }
   
}
