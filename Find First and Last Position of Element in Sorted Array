Solution 1 - seperate binary search for first and last index

class Solution {
    public int binarySearchFirstPart(int[] nums, int target, int low, int high)
    {
        while(low <= high)
        {
            int mid = low + (high - low)/ 2;
            if(nums[mid] == target)
            {
                if(mid == 0 || nums[mid - 1] != nums[mid])
                    return mid;
                else
                {
                    high = mid - 1;
                }
            }
            else if(nums[mid] < target)
            {
                low = mid + 1;
            }
            else
            {
                high = mid - 1;
            }
            
        }
        return -1;
    }
    
    public int binarySearchSecPart(int[] nums, int target, int low, int high)
    {
        while(low <= high)
        {
            int mid = low + (high - low)/ 2;
            if(nums[mid] == target)
            {
                if(mid == nums.length - 1 || nums[mid + 1] != nums[mid])
                    return mid;
                else
                {
                    low = mid + 1;
                }
            }
            else if(nums[mid] < target)
            {
                low = mid + 1;
            }
            else
            {
                high = mid - 1;
            }
            
        }
        return -1;
    }
    
    public int[] searchRange(int[] nums, int target) {
        if(nums == null || nums.length == 0)
            return new int[]{-1, -1};
        
        if(nums[nums.length - 1] < target)
        {
            return new int[]{-1, -1};
        }
        
        int first = binarySearchFirstPart(nums, target, 0, nums.length - 1);
        if(first == - 1)
        {
            return new int[]{-1, -1};
        }
        int sec = binarySearchSecPart(nums, target, first, nums.length - 1);
        return new int[]{first, sec};
        
    }
}

// TC - O(log n)
// SC - O(1)

Solution 2 - single binary search to calcuate both
class Solution {
    public int binarySearch(int[] nums, int target, int low, int high, boolean isFirst)
    {
        while(low <= high)
        {
            int mid = low + (high - low)/ 2;
            if(nums[mid] == target)
            {
               if((isFirst && (mid == 0 || nums[mid - 1] != nums[mid])) ||
                   (!isFirst && (mid == nums.length - 1 || nums[mid + 1] != nums[mid])))
                {
                    return mid;
                }
                else if(isFirst)
                {
                    high = mid - 1;
                }
                else
                {
                       low = mid + 1;
                }
            }
                  
            else if(nums[mid] < target)
            {
                low = mid + 1;
            }
            else
            {
                high = mid - 1;
            }
            
        }
        return -1;
    }
    
    public int[] searchRange(int[] nums, int target) {
        if(nums == null || nums.length == 0)
            return new int[]{-1, -1};
        
        if(nums[nums.length - 1] < target)
        {
            return new int[]{-1, -1};
        }
        
        int first = binarySearch(nums, target, 0, nums.length - 1, true);
        if(first == - 1)
        {
            return new int[]{-1, -1};
        }
        int sec = binarySearch(nums, target, first, nums.length - 1, false);
        return new int[]{first, sec};
        
    }
}

// TC - O(log n)
// SC - O(1)
