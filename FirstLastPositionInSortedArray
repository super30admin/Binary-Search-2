class Solution {

      // Time Complexity : O(log(length of array))
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : while finding the last occurence, loop is not converging. Looked up online for the trick in mid element calculation.


    public int[] searchRange(int[] nums, int target) {
        int low = 0;int high = nums.length-1;
        if(nums == null || nums.length == 0) return new int[] {-1,-1};
        while(low<high){
            int mid = low +(high-low)/2;6                                                          
            if(nums[mid]>=target){
                high = mid;
            }
            else{
                low = mid+1;
            }
        }
        int first = low;
        int low_ =0;int high_ = nums.length-1;
        while(low_<high_){
            int mid = low_+(high_-low_+1)/2;
            if(nums[mid]<=target){
                low_ = mid;
            }
            else{
                high_ = mid-1;
            }
        }
        int last = low_;
        if(nums[first] != target ) first = -1;
        if(nums[last] != target ) last = -1;
        return new int[] {first,last};
    }   
    }