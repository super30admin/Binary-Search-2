// Time Complexity  - O(log n)
// Space Complexity - 0(1) - Constant space
// Did this code successfully run on Leetcode : Yes successfully ran
// Any problem you faced while coding this : No

/* Your code here along with comments explaining your approach

To find the indexes, I am going to use two separate functions to find first index and last index

First Index Logic:
Do a regular binary search until mid element  = target

If mid element  > mid-1 element , then that is the first occurrence of the element
Otherwise, bring high pointer to mid-1

Last Index Logic:
Do a regular binary search until mid element  = target

If mid element  < mid+1 element , then that is the last occurrence of the element
Otherwise, bring low pointer to mid-1
						  
*/	


public class FirstNLastIndexSortedArray {

	private int findFirstPosition(int[] nums, int target) {

		if (nums == null || nums.length == 0)
			return -1;

		int low = 0, high = nums.length - 1;
		while (low <= high) {
			int mid = low + (high - low) / 2;

			if (target == nums[mid]) {
				if (mid == 0 || nums[mid] > nums[mid - 1]) {
					return mid;
				} else {
					high = mid - 1;
				}
			} else if (nums[mid] > target) {
				high = mid - 1;
			} else {
				low = mid + 1;
			}

		}
		return -1;
	}

	private int findLastPosition(int[] nums, int target) {

		int low = 0, high = nums.length - 1;
		while (low <= high) {
			int mid = low + (high - low) / 2;

			if (target == nums[mid]) {
				if (nums.length - 1 == mid || nums[mid] < nums[mid + 1]) {
					return mid;
				} else {
					low = mid + 1;
				}
			} else if (nums[mid] < target) {
				low = mid + 1;
			} else {
				high = mid - 1;
			}

		}
		return -1;

	}

	public int[] searchRange(int[] nums, int target) {

		int first = findFirstPosition(nums, target);
		int last = findLastPosition(nums, target);
		int[] ans = { first, last };
		return ans;
	}

	public static void main(String[] args) {

		FirstNLastIndexSortedArray fnl = new FirstNLastIndexSortedArray();

		int nums[] = { 1, 2, 3, 3, 4, 4, 5, 5, 5, 6, 7 };
		int target = 8;

		int[] ans = fnl.searchRange(nums, target);

		System.out.println(ans[0] + "     " + ans[1]);

	}

}
