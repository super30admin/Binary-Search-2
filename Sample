// Time Complexity :O(logn)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :Yes
// Any problem you faced while coding this :No

// Your code here along with comments explaining your approach
//Finding First and Last Element
    class Solution {
    private int getStartpos(int[] nums,int target){
        int start=0,end=nums.length-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(nums[mid]==target){
                if(mid==0||nums[mid-1]!=target){ // if mid is at startpos
                    return mid;
                }
                else{
                    end = mid-1;
                }
            }else if(target<nums[mid]){
                end = mid-1;
            }
            else{
                start = mid+1;
            }
        }
        return -1;
    }
    private int getEndpos(int[] nums,int target,int start){
        if(start==-1){
            return -1;
        }
        int end=nums.length-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(nums[mid]==target){
                if((mid==nums.length-1)||(nums[mid+1]!=target)){ //if my mid is at endpos
                    return mid;
                }
                else{
                    start = mid+1;
                }
            }else if(target<nums[mid]){
                end = mid-1;
            }
            else
            {
                start = mid+1;
            }
        }
            return -1;
        }
        public int[] searchRange(int[] nums, int target) {
        int startpos=getStartpos(nums,target);
        int endpos=getEndpos(nums,target,startpos);
        return new int[]{startpos,endpos};
    }
}
    

