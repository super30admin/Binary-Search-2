1. Problem: Find Peak Element

// Time Complexity : log(n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode :Yes
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach

class Solution {
    public int findPeakElement(int[] nums) {
        int left =0;
        int right = nums.length-1;
        while(left<right){
            int mid = left+(right-left)/2;
            if(nums[mid]>nums[mid+1]){
                right = mid;
            }else{
                left=mid+1;
            }
        }
        return left;
    }
}



2. Problem: Find Minimum in Rotated Sorted Array

// Time Complexity : log(n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode :Yes
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach

class Solution {
    public int findMin(int[] nums) {
        if(nums.length==1 || nums[0]<nums[nums.length-1]){
            return nums[0];
        }
        int left =0;
        int right = nums.length-1;
        int mid=0;
        
        while(left<=right){
            mid = left+(right-left)/2;
            
            if(nums[mid]>nums[mid+1]){
                return nums[mid+1];
            }
            
            if(nums[mid]<nums[mid-1]){
                return nums[mid];
            }
            
            if(nums[mid]>nums[left]){
                left = mid+1;
            }else{
                right = mid-1;
            }
        }
        return -1;
    }
}

3. Problem: Find First and Last Position of Element in Sorted Array

// Time Complexity : log(n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode :Yes
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach

class Solution {
    public int[] searchRange(int[] nums, int target) {
        int left=0;
        int right = nums.length-1;
        int firstindex=findfirstidx(nums,left,right,target);
        int secondindex = findsecondidx(nums,left,right,target);
        
        int[] arr = new int[]{firstindex,secondindex};
        return arr;
    }
    
    public int findfirstidx(int[] nums, int left,int right,int target){
        
        
        int findex=-1;
        while(left<=right){
            int mid = left+(right-left)/2;
            
            if(nums[mid]==target){
                findex = mid;
            }
            if(nums[mid]>=target){
                right = mid-1;
            }else{
                left = mid+1;
            }
        }
        return findex;
    }
    
    public int findsecondidx(int[] nums, int left,int right,int target){
        
        
        int lindex=-1;
        while(left<=right){
            int mid = left+(right-left)/2;
            
            if(nums[mid]==target){
                lindex = mid;
            }
            if(nums[mid]<=target){
                left = mid+1;
            }else{
                right = mid-1;
            }
        }
        return lindex;
    }
}