// Time Complexity : o(log(n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No


// Your code here along with comments explaining your approach


// Find minimum element in rotated sorted array

class Solution {
    public int findMin(int[] nums) {
        if(nums.length==1)
            return nums[0];
        
        int low = 0;
        int high = nums.length-1;
        
        while(low<=high) {
            int mid = low + (high-low)/2;
            
            if(nums[low]<nums[high])
                return nums[low];
                
            //terminating condition
            if((mid==0 || nums[mid]<nums[mid-1]) && (mid==nums.length-1 || nums[mid]<nums[mid+1]))
                return nums[mid];
            else{
                //eliminate the sorted half
                if(nums[low]<=nums[mid])
                    low = mid + 1;
                else
                    high = mid - 1;
            }
        }
        
        return 56;
    }
}





/* Find peak element in an array
*/

class Solution {
    public int findPeakElement(int[] nums) {
        
        if(nums.length==1)
            return 0;
        
        int low = 0;
        int high = nums.length-1;
        
        while(low<=high) {
            int mid = low+(high-low)/2;
            if((mid==0 || nums[mid]>nums[mid-1]) && (mid==nums.length-1 || nums[mid]>nums[mid+1]))
                return mid;
            else{
                if(mid > 0 && nums[mid-1]>nums[mid])
                    high = mid - 1;
                else
                    low = mid + 1 ;
            }
        }
        
        return -1;
    }
}



/* Find First and Last Position of Element in Sorted Array
*/


class Solution {
    int lowFirstIndex;
    public int[] searchRange(int[] nums, int target) {
        if(nums.length==0)
            return new int[] {-1,-1};
        
        int first = binarySearchFirst(nums,target);
        if(first==-1)
            return new int[] {-1,-1};
        
        lowFirstIndex = first;
        int last = binarySearchLast(nums,target);
        
        return new int[] {first,last};
    }
    
    public int binarySearchFirst(int[] nums, int target) {
        
        int low = 0;
        int high = nums.length-1;
        
        while(low<=high) {
            int mid = low + (high-low)/2;
            
            if(nums[mid] == target){
                if(mid==0 || nums[mid]>nums[mid-1])
                    return mid;
                else{
                    high = mid-1;
                }
            }else {
                if(nums[mid]<target)
                    low = mid + 1;
                else
                    high = mid -1;
            }
        }
        
        return -1;
    }
    
    public int binarySearchLast(int[] nums, int target) {
        int low = lowFirstIndex;
        int high = nums.length-1;
        
        while(low<=high) {
            int mid = low + (high-low)/2;
            if(nums[mid] == target){
                if(mid==nums.length-1 || nums[mid]<nums[mid+1])
                    return mid;
                else{
                    low = mid+1;
                }
            }else {
                if(nums[mid]<target)
                    low = mid + 1;
                else
                    high = mid -1;
            }
        }
        
        return -1;
    }
} 
