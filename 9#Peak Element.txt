// Time Complexity : 0(log n)
// Space Complexity : 0(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No

class Solution {
    public int findPeakElement(int[] nums) {
        //edge case
        if(nums == null || nume.length == 0) 
            return -1;
        
        // two pointers , one to start and one to end of array
        int l = 0, r = nums.length - 1;
        
        // binary search to find peak
        while (l < r) {
            
            // mid element
            int mid = l+((r-l) / 2);
            
            // if element on left and right of mid are smaller than mid then return mid
            if((mid == 0 || nums[mid] > nums[mid-1]) &&(mid == nums.length -1 || nums[mid] > nums[mid+1]))
                return mid;
            
            // if element on right of mid is less than mid than peak element is in left part so move r pointer
            if (mid  == nums.length -1 || nums[mid] > nums[mid + 1])
                r = mid-1;
            
            else // else move l pointer
                l = mid+1;
        }
        
        return -1; // by default return -1
    }
}