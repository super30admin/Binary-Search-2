class Solution {
    
    public int[] searchRange(int[] nums, int target) {
        int start =0;
        int end = nums.length -1;
        
        if(nums.length ==0 || nums == null)
        {
            return new int[]{-1,-1};
        }
       
        if(target < nums[0] && nums[nums.length-1] <target)
        {
            return new int[]{-1,-1};
        }
        if(target == nums[start] && nums[nums.length-1] ==target)
        {
            return new int[]{start,end};
        }
        int left = binarySearch(nums, 0, nums.length-1, target, true);
        int right = binarySearch(nums, 0, nums.length-1, target, false);
        return new int[]{left, right};
    }
    
    private int binarySearch(int[] nums, int start, int end, int target, boolean isLeft)
    {
        
        while(start <= end)
        {
            int mid = start + (end-start) /2;
            
            if(nums[mid] == target)
            {
                if(isLeft)
                {
                    if(mid == 0 || nums[mid-1] < nums[mid])
                    {
                        return mid;
                    }
                    else
                    {
                        end = mid-1;
                    }
                }
                else
                {
                     if(mid == nums.length-1 || nums[mid] < nums[mid+1])
                        {
                            return mid;
                        }
                    else
                        {
                            start = mid+1;
                        }
                }
            }
            else if(nums[mid]>target)
            {
                end = mid-1;
            }
            else
            {
                start = mid+1;
            }
        }
        return -1;
    }
}

// Time Complexity :O(log n)
// Space Complexity : constant
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this :
edge cases

// Your code here along with comments explaining your approach
class Solution {
    public int findPeakElement(int[] nums) {
        int low =0;
        int high = nums.length -1;
        
        if(nums == null || nums.length ==0)
            return -1;
        if(nums.length == 1)
            return 0;
        
        while(low <= high)
        {
            int mid = low + (high-low)/2;
            if((mid == 0 || nums[mid]>nums[mid-1]) && (mid == nums.length -1 || nums[mid]>nums[mid+1]))
                return mid;
            else
            {
                //move towards greater
                if(nums[mid]<nums[mid+1])
                    low = mid+1;
                else
                    high = mid-1;
            }
        }
        return -1;
    }
    
}

class Solution {
    public int findMin(int[] nums) {
        
        int start =0;
        int end = nums.length-1;
        
        while(start <= end)
        {
            int mid = start + (end-start)/2;
           // System.out.println("mid = "+nums[mid]);
            if((mid == 0 || nums[mid-1] > nums[mid]) && (mid == nums.length-1 || nums[mid+1] > nums[mid]))
            {
                //System.out.println("mid = "+nums[mid]);
                return nums[mid];
            }
            else if(nums[mid] < nums[end])
            {
                 end = mid -1;
            }
            else 
            {
               start = mid +1;
            }
            
        }
       
        return -1;
    }
}
