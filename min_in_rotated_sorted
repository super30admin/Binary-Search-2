// Time Complexity : O(logN)
// Space Complexity : O(1)
// Did this code successfully run in leetcode : Yes
// Any problems faced : No
// Approach
/*
If array is already sorted, first element will be the minimum element
Most of the times, minimum element will be present in unsorted part
If both the sides are sorted then minimum element will be found on right side
if the current mid element is less than the immediate left and right elements, then mid element will be the required answer.
*/

class Solution {
public:
    int findMin(vector<int>& nums) {
        int low = 0;
        int high = nums.size() - 1;
        while(low <= high) {
            int mid = low + (high - low) / 2;
            if(nums[low] <= nums[high]) {
                return nums[low];
            } else {
                if((mid == 0 || nums[mid] < nums[mid - 1]) && (mid == nums.size() - 1 || nums[mid] < nums[mid + 1])) {
                    return nums[mid];
                } else if(nums[low] <= nums[mid]) {
                    low = mid + 1;
                } else {
                    high = mid - 1;
                }
            }
        }
        return -1;
    }
};