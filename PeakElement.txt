// Time Complexity : O(log n)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : Had to search the algorithm to implement Optimized solution 


class Solution {
    public int findPeakElement(int[] nums) {
        
/*
    
    
Brute force 
    
    
        int i = 1;
        int j = nums.length - 1;
        
        if (nums.length == 1)
          return 0;
        
        if (nums[0] > nums[1]){
            
            return 0;
        }
        
        if ( nums[j] > nums[j -1]){
            
            return j;
        }
        
        while ( i < j ){
            
            if (nums[i] > nums[i-1] &&
                nums[i] > nums[i+1]){
                
                return i;
            }
        }
        return -1;
        
*/
        
        if (nums.length == 1) {
                  return 0;
            }
        
        if (nums[0] > nums[1]){
            
            return 0;
        }
        
        if ( nums[nums.length - 1] > nums[nums.length - 2]){
            
            return nums.length - 1;
        }
        
        int low = 0;
        
        int high = nums.length - 1;
        

        
        
        while (low < high ){
            
           int mid = low + (high - low)/2 ;
            
            if (nums[mid] > nums[mid + 1]){
                
                high = mid;
            }
            else {
                
                low = mid + 1;
            }
            
            
        }
        
        return low;
        
        
    }
    
    
}