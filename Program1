// Time Complexity : O(log(n))
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no


// Your code here along with comments explaining your approach
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int left=Left(nums,target);//find the start of target
        int right=Right(nums,target);//find the end of target
        return new int[] {left,right};

    }
    private int Left(int[] nums, int target){
        int low=0,high=nums.length-1;
        while(low<=high){
                int mid=low+(high-low)/2;
            if(nums[mid]==target){//if mid is equal to target we go on left side to check for starting element
                if(mid==low||nums[mid-1]!= nums[mid]) return mid;//if left element is not equalt to target or we reach the start of element we return the mid
                else high=mid-1;
            }
            else if(nums[mid]<target){
                low=mid+1;
            }
            else high=mid-1;
        }
         return -1;
        }
    private int Right(int[] nums, int target){
        int low=0,high=nums.length-1;
        while(low<=high){
            int mid=low+(high-low)/2;
            if(nums[mid]==target){/if mid is equal to target we go on right side to check for ending element
                if(mid==high||nums[mid+1]!= nums[mid]) return mid;
                else low=mid+1;
            }
            else if(nums[mid]<target){
                low=mid+1;
            }
            else high=mid-1;
        }
         return -1;
        }
 }
