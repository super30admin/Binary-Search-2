// Time Complexity : O(logn)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No


// Your code here along with comments explaining your approach
// we perform two binary search for finding first and last index of the target

class Solution {
private int binarySearchLeft(int [] nums, int low, int high, int target){
    while(low<= high){
        int mid = low + (high-low)/2;
        if(nums[mid] == target){
            if(mid == low || nums[mid]>nums[mid-1]){
                return mid;
            }else{
                high = mid -1;
            }
        }else if(nums[mid]>target){
            high = mid -1;
        }else{
            low = mid + 1;
        }
    }return -1;
}
private int binarySearchRight(int [] nums, int low, int high, int target){
    while(low<= high){
        int mid = low + (high-low)/2;
        if(nums[mid] == target){
            if(mid == high || nums[mid]<nums[mid+1]){
                return mid;
            }else{
                low = mid + 1;
            }
        }else if(nums[mid]>target){
            high = mid -1;
        }else{
            low = mid + 1;
        }
    }return -1;
}

    public int[] searchRange(int[] nums, int target) {
        if(nums == null || nums.length == 0) return new int[] {-1,-1};
        int n = nums.length;
        if(nums[0]>target || nums[n-1]<target) return new int[] {-1,-1};
        int first = binarySearchLeft(nums, 0, n-1, target);
        if(first == -1) return new int[] {-1,-1};
        int last = binarySearchRight(nums, first, n-1, target);
        return new int [] {first,last}; 
    }
}