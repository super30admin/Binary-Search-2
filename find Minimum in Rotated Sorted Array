// Time Complexity : O(logN)
// Space Complexity : O(1) 
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : Had to look the video again for hint.


// Your code here along with comments explaining your approach
//Approach: 1. return element when it's smaller than elemnt on left and right


class Solution {
    public int findMin(int[] nums) {
        int low = 0; 
        int high = nums.length - 1;
        
        if(nums==null || nums.length==0){
                return -1;
        }
        while(low<=high){
            int mid = low + (high - low)/2; 
            
            
            if(nums[low] < nums[high]){ //case 1 --> Whole array is Sorted 
                return nums[low];
            }
            
            if((mid==low || nums[mid]<nums[mid-1]) && (mid==high || nums[mid]<nums[mid+1])){ //Case2--> return MID when everything else is checked
                return nums[mid];
            }else if(nums[low]<=nums[mid]){ //Case 2--> If 1 array part is sorted --> move 2 another part
                low = mid + 1;
            }else{
                high = mid - 1;
            }
            
        }
            return -1;
    }
}
