# Time Complexity : O(log(n))
# Space Complexity : O(1)
# Did this code successfully run on Leetcode : yes
# Any problem you faced while coding this : no

class Solution:

    def searchRange(self, nums: List[int], target: int) -> List[int]:
        low = 0
        high = len(nums) - 1
        n = len(nums)

        if not nums: return [-1,-1]

        if (nums[low] > target) or nums[high] < target:
            return [-1,-1]
        
        first = self.binary_search_first (nums, target, 0, n-1)
        if (first == -1): return [-1,-1]
        second = self.binary_search_second( nums, target, first, n-1)

        return [first,second]

    def binary_search_first(self, nums, target, low, high):
        while (low <= high):
            mid = low + (high-low)//2
            if (nums[mid] == target):
                if (nums[mid] > nums[mid -1] or mid == 0):
                    return mid
                else:
                    high = mid - 1
            elif (nums[mid] < target):
                low = mid + 1
            else:
                high = mid - 1
        return -1
    
    def binary_search_second(self, nums, target, low, high):
        while (low <= high):
            mid = low + (high-low)//2
            if (nums[mid] == target):
                if (mid == len(nums)-1 or nums[mid] < nums[mid +1]):
                    return mid
                else:
                   low = mid + 1
            elif (nums[mid] > target):
                high = mid - 1 
            else:
                low = mid + 1             
        return -1
        

    
    
