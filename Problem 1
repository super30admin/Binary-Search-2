# Find First and Last Position of Element in Sorted Array
#Time complexity : O( logn )

class Solution(object):
    def searchRange(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        def binarySearchLeft(nums, target):
            left, right = 0, len(nums)
            while left < right:
                mid = left + (right - left) // 2
                if nums[mid] < target:
                    left = mid + 1
                else:
                    right = mid
            return left
        
        def binarySearchRight(nums, target):
            left, right = 0, len(nums)
            while left < right:
                mid = left + (right - left) // 2
                if nums[mid] <= target:
                    left = mid + 1
                else:
                    right = mid
            return left
        
        left_index = binarySearchLeft(nums, target)
        right_index = binarySearchRight(nums, target) - 1
        
        if left_index <= right_index:
            return [left_index, right_index]
        else:
            return [-1, -1]

# Example usage:
nums1 = [5, 7, 7, 8, 8, 10]
target1 = 8
solution = Solution()
result1 = solution.searchRange(nums1, target1)
print(result1)  # Output: [3, 4]

nums2 = [5, 7, 7, 8, 8, 10]
target2 = 6
result2 = solution.searchRange(nums2, target2)
print(result2)  # Output: [-1, -1]

nums3 = []
target3 = 0
result3 = solution.searchRange(nums3, target3)
print(result3)  # Output: [-1, -1]
