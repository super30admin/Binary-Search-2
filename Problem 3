// Explanation - While implementing the binary search, if mid value is greater than its neighbours, return mid. Else go towards the number greater than mid so that reach a peak.
// Time Complexity = O(logn)
// Space Complexity = O(1)
// Executed the code in LeetCode

class Solution {
    public int findPeakElement(int[] nums) {

        int n = nums.length;
        int low = 0, high = n - 1;

        if(nums == null || n == 0) return -1;

        while(low <= high){
            int mid = low + (high - low)/2;
            if((mid == 0 || nums[mid] > nums[mid - 1] ) && ((mid == n - 1) || nums[mid] > nums[mid + 1] )) {
                return mid;
            }
            else if(nums[mid] < nums[mid + 1]){
                low = mid + 1;
            }
            else{
                high = mid - 1;
            }
        }
       return -1; 
    }
}
