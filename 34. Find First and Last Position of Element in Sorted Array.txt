// Time Complexity :O(log n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No


// Your code here along with comments explaining your approach
//two pass

class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] ans = {-1, -1};
        int start = 0;
        int end = nums.length - 1;
        
        //for first occurence
        while(start<=end){
            int mid = start + (end-start)/2;
            if(nums[mid]==target){
                ans[0] = mid;
                end=mid-1;
            }
            else if(nums[mid]<target){
                start=mid+1;
            }else{
                end=mid-1;
            }
        }
        
        //for last occurence
        start = 0;
        end=nums.length - 1;
           while(start<=end){
            int mid = start + (end-start)/2;
            if(nums[mid]==target){
                ans[1] = mid;
                start=mid+1;
            }
            else if(nums[mid]<target){
                start=mid+1;
            }else{
                end=mid-1;
            }
        }
        
        return ans;
        
    }
}