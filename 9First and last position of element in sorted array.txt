//34. Find First and Last Position of Element in Sorted Array

// Time Complexity :O(log n)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach in three sentences only

class Solution {

    private int binarySearch1(int []nums,int low,int high,int target){

        while(low<=high){

            int mid=low+(high-low)/2;

            if(nums[mid]==target){
                if(mid==0 || nums[mid]!=nums[mid-1]){
                    return mid;
                }else{
                    high=mid-1;
                }
            }else if(nums[mid]>target){
                    high=mid-1;
                }else{
                    low=mid+1;
                }

        }
        return -1;

    }

    private int binarySearch2(int []nums,int low,int high,int target){

        while(low<=high){

            int mid=low+(high-low)/2;

            if(nums[mid]==target){
                if(nums.length-1 == mid || nums[mid]!=nums[mid+1]){
                    return mid;
                }else{
                    low=mid+1;
                }
            }else if(nums[mid]>target){
                    high=mid-1;
                }else{
                    low=mid+1;
                }

        }
        return -1;

    }

    public int[] searchRange(int[] nums, int target) {

        if(nums==null || nums.length==0){
            return new int[] {-1,-1};
        }
        if(nums[0]>target || nums[nums.length-1]<target){
            return new int[]{-1,-1};
        }
        int first=binarySearch1(nums,0,nums.length-1,target);
        if(first==-1){
            return new int[]{-1,-1};
        }
     int second=binarySearch2(nums,first,nums.length-1,target);

        return new int[] {first,second};
    }
}