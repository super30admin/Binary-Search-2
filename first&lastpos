class Solution {
    int lowforlast=0;
    public int[] searchRange(int[] nums, int target) {
        
       if(nums.length==0|| nums==null) return new int []{-1,-1};
       if(target<nums[0]|| target> nums[nums.length-1]){ return new int[]{-1,-1};}
       int first= binarysearchfirst(nums,target);
       lowforlast=first;
       if(first==-1){return new int[]{-1,-1}; }
       int last= binarysearchlast(nums,target);
       return new int []{first,last};
    }

    public int binarysearchfirst(int[] nums, int target){
        int low=0; int high=nums.length-1; int mid=0;
        while(low<=high){
            mid=low+(high-low)/2;
            if(nums[mid]==target){
                if(mid==0|| nums[mid-1]< nums[mid]){
                  return mid;
                }
            
                else{high=mid-1;}

            }
            else if (target>nums[mid]){ low=mid+1;}
            else{ high=mid-1;}
        }
        return -1;
    }
    public int binarysearchlast(int[] nums, int target){
        int low=lowforlast; int high=nums.length-1; int mid=0;
        while(low<=high){
            mid=low+(high-low)/2;
            if(nums[mid]==target){
                if(mid==nums.length-1|| nums[mid+1]> nums[mid]){
                  return mid;
                }
               // else if(nums[mid]< target){ low=mid+1;}
                else{low=mid+1;}

            }
            else if (target>nums[mid]){ low=mid+1;}
            else{ high=mid-1;}
        }
        return -1;
    }


}
