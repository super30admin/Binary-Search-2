# Find Minimum in Rotated Sorted Array
# Time complexity: O(logn)
#Approach: Applying binary Search

class Solution(object):
    def findMin(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        left, right = 0, len(nums) - 1

        while left < right:
            mid = left + (right - left) // 2

            if nums[mid] > nums[right]:
                # The minimum element is in the right half
                left = mid + 1
            else:
                # The minimum element is in the left half or at the current position
                right = mid

        return nums[left]

# Example usage:
nums1 = [3, 4, 5, 1, 2]
solution = Solution()
result1 = solution.findMin(nums1)
print(result1)  # Output: 1

nums2 = [4, 5, 6, 7, 0, 1, 2]
result2 = solution.findMin(nums2)
print(result2)  # Output: 0

nums3 = [11, 13, 15, 17]
result3 = solution.findMin(nums3)
print(result3)  # Output: 11

        
