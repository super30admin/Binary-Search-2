// Time Complexity : O(logN)
// Space Complexity : O(1)
// Did this code successfully run in leetcode : Yes
// Any problems faced : No
// Approach
/*
It is assured that peak element will be found towards the increasing side of mid.
Using this statement, we do binary search towards left if the left adjacent element of mid is greater than the mid element, else if right adjacent element of mid is greater than mid, then do the binary search towards right.
If both of them are smaller than the mid element return mid
*/

class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int low = 0;
        int high = nums.size() - 1;
        while(low <= high) {
            int mid = low + (high - low) / 2;
            if(mid != low && nums[mid - 1] > nums[mid]) {
                high = mid - 1;
            } else if(mid != high && nums[mid + 1] > nums[mid]) {
                low = mid + 1;
            } else if((mid == low || nums[mid - 1] < nums[mid]) && (mid == high  || nums[mid + 1] < nums[mid])) {
                return mid;
            }
        }
        return 0;
    }
};