// Time Complexity : O(logn)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No

// Your code here along with comments explaining your approach

// We perform binary search on the array
// We move to the unsorted half of the array
// When we find that middle is less than neighbors, we return middle

class Solution {
    public int findMin(int[] nums) {
        if(nums == null || nums.length == 0) return 0;
        int n = nums.length;
        int low = 0;
        int high = n-1;
        while(low <= high){
            if( nums[low] <= nums[high]) return nums[low];
            int mid = low + (high - low)/2;
            if((mid == 0 || nums[mid]<nums[mid-1]) && (nums[mid]<nums[mid+1])){
                return nums[mid];
            }else if(nums[low]<=nums[mid]){
                low = mid+1;
            }else{
                high = mid-1;
            }
        }return -1;
    }
}
