class Solution:
    # leetcode URL : https://leetcode.com/problems/find-peak-element/
    # Problem : 162. Find Peak Element
	# Time Complexity : O(log n)
	# Space Complexity : O (1)
    def findPeakElement(self, nums: List[int]) -> int:
        s = 0
        e = len(nums) - 1
        while (s<=e):
            m = int((s+e)/2)
            if ( m == 0 or nums[m-1]<nums[m])  and (m == len(nums)-1 or nums[m]>nums[m+1] ): # assuming absolute left and absolute right are negative infinite
                return m
            if (nums[m-1]<nums[m]):
                s = m+1
            elif (nums[m+1]<nums[m]):
                e = m-1
            else:
                s = m+1 # decision to go right if both sides of m are higher can be changed to e = m-1 and still get expected result