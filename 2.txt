// Time Complexity : O(log n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : None


// Your code here along with comments explaining your approach

approach: we check for an element which is less than it's previous element, if we are at index 0, then we check if the element is
less than it's next element. We go left if the mid element is less than the last element of the array. We go right if the mid element
is more than the last element of the array.

class Solution:
    def findMin(self, nums: List[int]) -> int:
        if not nums: return None
        if len(nums) == 1: return nums[0]

        l, r = 0, len(nums) - 1

        while l <= r:
            mid = l + (r - l) // 2

            if (mid > 0 and nums[mid] < nums[mid - 1]) or (mid == 0 and nums[mid] < nums[mid + 1]):
                return nums[mid]
            elif nums[mid] > nums[-1]:
                l = mid + 1
            elif nums[mid] < nums[-1]:
                r = mid - 1

        return nums[r]
