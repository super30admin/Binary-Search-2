class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        if  len(nums)==0 or nums==None:
           return [-1,-1]
        first = self.binarysearchFirst(nums,target)
        if first == -1:
            return [-1,-1]
        last = self.binarysearchLast(nums,target)
        return [first,last]
    def binarysearchFirst(self,nums: List[int], target: int) ->int:
        low=0
        high =len(nums)-1
        while low<=high:
            mid =low +( high-low)//2
            if nums[mid]== target:
                if mid ==0 or nums[mid-1] !=nums[mid]:
                   return mid
                else:
                    high=mid-1
            elif nums[mid]> target:
                high= mid-1
            else:
                low =mid +1
        return -1
    def binarysearchLast(self,nums: List[int], target: int) ->int:
        low=0
        high=len(nums)-1
        while low<=high:
            mid =low+(high-low)//2
            if nums[mid]==target:
                if (mid==len(nums)-1) or  (nums[mid+1]!=nums[mid]):
                    return mid
                else:
                    low=mid+1
            elif nums[mid]>target:
                high=mid-1
            else:
                low=mid+1
        return -1

TC- O(Log n)
SC- O(1)

