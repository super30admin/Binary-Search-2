// Time Complexity : o(log n)
// Space Complexity : o(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no


// Your code here along with comments explaining your approach
/*
*  min element should be less than its neighbours or if it is fully sorted it should be at the first position
*
* */

class Solution {
    public int findMin(int[] nums) {
        int n = nums.length ;
        int low = 0;
        int high = n -1;

        while(low <= high){
            if(nums[low] <= nums[high]) return nums[low];

            int mid = low + (high - low)/2;
            if( ( mid ==0 || nums[mid] < nums[mid-1]) && (mid==n-1 || nums[mid] < nums[mid+1])){
                return nums[mid];
            }
            if(nums[mid ] > nums[high]){
                low = mid +1;
            } else {
                high = mid -1;
            }
        }
        return -1;
    }
}