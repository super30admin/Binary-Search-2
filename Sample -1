// Time Complexity :O(log (n))
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach
class Solution {
    public int[] searchRange(int[] nums, int target) {
        if( nums == null || nums.length == 0) return new int[]{-1,-1};
        if(target < nums[0] || target > nums[nums.length - 1]) return new int[]{-1,-1};
        int first = binaryFirstSearch(nums, target);
        int last = binaryLastSearch(nums, target);
        
        return new int[]{first,last};
        
    }
    
    private int binaryFirstSearch(int[] nums,int target)
    {
        int low =0;
        int high = nums.length - 1;
        while(low<=high)
        {
            int mid = low + (high - low)/2;
            if(nums[mid] == target)
            {
                if(mid == 0 || nums[mid]>nums[mid-1])
                {
                    return mid;
                }
                else 
                    high = mid -1;
            }
            else if(nums[mid] > target)
            {
                high = mid -1;
                
            }else
            {
                low = mid + 1;
            }
        }
        return -1;
    }
    private int binaryLastSearch(int[] nums,int target)
    {
        int low =0;
        int high = nums.length - 1;
        while(low<=high)
        {
            int mid = low + (high - low)/2;
            if(nums[mid] == target)
            {
                if(mid == nums.length - 1 || nums[mid]<nums[mid+1])
                {
                    return mid;
                }
                else 
                    low = mid + 1;
            }
            else if(nums[mid] > target)
            {
                high = mid -1;
                
            }else
            {
                low = mid + 1;
            }
        }
            return -1;
    }
}