class Solution():
    
    def searchRange(self, nums: List[int], target: int) -> List[int]: 
        f=Solution().searchRange_first(nums,target,0,len(nums)-1)
        s=Solution().searchRange_second(nums,target,0,len(nums)-1)
        return f,s
        
        
    def searchRange_first(self, nums: List[int],target: int,low:int,high:int,) -> List[int]:
        while (low<=high):
            mid=low+(high-low)//2
            if (nums[mid]==target):
                if (mid==0 or nums[mid-1]<target):
                    return mid   ### First Position if
                else:
                    high=mid-1
            elif (nums[mid]>target):
                    high=mid-1
            else:
                    low=mid+1
        return -1
                    
    def searchRange_second(self, nums: List[int],target: int,low:int,high:int, ) -> List[int]:
        while (low<=high):
            mid=low+(high-low)//2
            if (nums[mid]==target):
                if (mid==len(nums)-1 or nums[mid+1]>target):
                    return mid### last Position if #mid is target
                else:
                    low=mid+1
            elif (nums[mid]>target):
                    high=mid-1
            else:
                    low=mid+1
        return -1        
