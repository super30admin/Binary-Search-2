class Solution {
    int first;
    public int[] searchRange(int[] nums, int target) 

    {
        
        // Edge case
        if(nums == null)
        {
            return new int[] {-1, -1};
        }
        int n = nums.length;
        
        if(nums[0]> target ||  nums[n-1] < target)
        {
            return new int[] {-1, -1};
        }
        
        first = binarySearchFirst(nums, target);
        if(first == -1)
        {
             return new int[] {-1, -1};
        }
    int last = binarySearchLast(nums, target);
        {
            return new int[] {first,last};
            
        }
}
    
    private int binarySearchFirst(int[] nums, int target) 
    {
        int low = 0;
        int high = nums.length - 1;
        
        while(low <= high)
        {
            int mid = low+(high-low)/2;
            
            if(nums[mid] == target)
            {
                // first index
                if(mid ==0  || nums[mid] > nums[mid-1])
                {
                    return mid;
                }
                else
                {
                    high = mid-1;
                }
                
            }
            
            else if(nums[mid] < target)
            {
                low = mid+1;
            }
            
            else
            {
                high = mid -1;
            }
        }
    }
    
    
    private int binarySearchLast(int[] nums, int target) 
    {
        int low = first;
        int high = nums.length - 1;
        
        while(low <= high)
        {
             int mid = low+(high-low)/2;
            
            if(nums[mid] == target)
            {
                if(mid = nums.length-1 || nums[mid] < nums[mid+1])
                {
                    return mid;
                }
                else
                {
                    low = mid+1;
                }
            }
            
            else if (nums[mid] < target)
            {
                low = mid+1;
            }
            
            else
            {
                high = mid -1;
            }
        }
    }
        
}
