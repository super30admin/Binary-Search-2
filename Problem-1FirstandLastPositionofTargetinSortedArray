//running: yes;
//TC: O(logN)
//SC: O(1)

class Solution {
    public int[] searchRange(int[] nums, int target) {
    if(nums.length==0 || nums==null) return new int[] {-1,-1};
        
    if(nums[0]==target && nums[nums.length-1]==target) 
    {
        return new int[] {0,nums.length};
    }
        
        int left=binarySearchLeft(nums, target);
        int right=binarySearchRight(nums,target);
        
        return new int[]{left,right};
    }
    
    public int binarySearchLeft(int nums[], int target){
        int low=0;
        int high=nums.length-1;
        int mid=low+(high-low)/2;
        System.out.println("Mid Element:"+mid);
        
        while(low<=high){
            if(target==nums[mid]){
                if(mid==0 || nums[mid-1]<nums[mid]){
                    return mid;
                }else{
                 high=mid-1;   
                }
            }else if(target<nums[mid]){
                high=mid-1;
            }else{
                low=mid+1;
            }
        }
        return -1;
    }
    
    public int binarySearchRight(int nums[], int target){
        int low=0;
        int high=nums.length-1;
        int mid=low+(high-low)/2;
        
        while(low<=high){
            if(target==nums[mid]){
                if(mid==nums.length-1 || nums[mid+1]>nums[mid]){
                    return mid;
                }else{
                    high=mid-1;
                }
            }else if(target<nums[mid]){
                high=mid-1;
            }else{
                low=mid+1;
            }
        }
        return -1;
    }
    
}
