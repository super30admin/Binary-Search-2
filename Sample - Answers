// class Solution {
//    //T.C = O(log N)
//     //S.C. = O(1)
//     public int[] searchRange(int[] nums, int target) {
//         //base case
//         if(nums == null || nums.length ==0) return new int[] {-1, -1};
//         //checking if target lies in the array
//         if(target<nums[0]||target>nums[nums.length-1]){
//             return new int[] {-1,-1};
//             }



//         int first = binarysearchforfirstoccurance(nums, target);
//         if(first == -1){
//             return new int[] {-1,-1};
//         }

//         int second = binarysearchforsecondoccurance(nums, target);
//             return new int[] {first,second};

//     }
//         private int binarysearchforfirstoccurance (int[] nums,int target){
//             int low = 0;
//         int high = nums.length -1;

//             while (low<=high){
//                 int mid = low + (high - low)/2;
//             if(nums[mid]==target){
//                 if(mid==0 || nums[mid-1]<nums[mid]){
//                 return mid;
//                 }else {high = mid-1;}

//             }else

//                     if(nums[mid]>target){
//                         high = mid-1;
//                     }else
//                     {low = mid+1;}




//        }
//          return -1;}


//         private int binarysearchforsecondoccurance(int[] nums,int target){
//         int low = 0;
//         int high = nums.length -1;

//             while (low<=high){
//             int mid = low + (high - low)/2;
//             if(nums[mid]==target){
//                 if(mid==nums.length -1 || nums[mid]<nums[mid+1]){
//                 return mid;
//                 }else {
//                  low = mid+1;
//                 }
//             }
//              else
//                  if(nums[mid]>target){
//                         high = mid-1;
//                     }else
//                     {low = mid+1;}



//         }return -1;}



//     }
//===================================================
// class Solution {
//     // time Complexity : O(log N)
//     //space complexity: O(1)
//     public int findMin(int[] nums) {
//         int low =0, high = nums.length-1;
//         while(low<=high){
//             int mid = low + (high-low)/2;
//             if(nums[low]<nums[high]){return nums[low];}

//             if(high-low<3){
//                 if(nums[mid]>nums[high]){
//                     return nums[high];

//                 }else return nums[mid];
//             }


//             if(nums[mid-1]>=nums[low] && nums[mid+1]<=nums[high]){
//                 if(nums[mid]>nums[mid+1]){return nums[mid+1];}
//                 else return nums[mid];
//             } else if(nums[mid]<nums[high]){
//                 high = mid -1;
//             }else {
//                 low = mid+1;
//             }
//         }
//    return -1; }
// }
//=================================================

// //Time complexity O(N)
// //Space complexity - O(1)
// class Solution {

//     public int findPeakElement(int[] nums) {
//         int low = 0;
//         int high = nums.length -1;
//         while(low<=high){
//             int mid = low + (high - low)/2;
//             if(mid==0 && high==0){
//                 return mid;
//                     }else if(mid==0 &&high==1){
//                                 if(nums[mid+1]>nums[mid]){
//                                     return mid+1;
//                                 }else return mid;
//                                    }
//            else if((mid==0 || mid ==nums.length-1) || (nums[mid]>nums[mid+1] && nums[mid]>nums[mid-1]))  {
//                   return mid;

//               }else if(nums[mid]<nums[mid+1]){
//                 low = mid+1;
//             }else high = mid-1;

//         }
//    return -1; }
// }


