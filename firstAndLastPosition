class Solution {
    
    //34. Find First and Last Position of Element in Sorted Array
    //Time complexity : O(logn)
    //Space complexity : O(1)
    public int[] searchRange(int[] nums, int target) {
        
        if(nums == null || nums.length == 0)
            return new int[]{-1,-1};
        if(target < nums[0] || target > nums[nums.length-1])
            return new int[]{-1,-1};
        
        int first = binarySearchFirst(nums,target);
        int last = binarySearchLast(nums,target);
        
        return new int[]{first,last}; 
    }
    
    private int binarySearchFirst(int[] nums, int target){
        
        
        int low = 0;
        int high = nums.length-1;
        while(low <= high){
            
            int mid = low + (high-low)/2;
            
            //3 cases
            //1st when mid == target
            if(nums[mid] == target){
                //case 1 when mid is the first position
                if(mid == 0 || nums[mid-1] < nums[mid])
                    return mid;
                //case 2 when the first position is not the mid
                else 
                    high = mid -1;
                
            }
            
            //2nd case when target is less than mid
            else if(target < nums[mid])
                high = mid -1;
            
            //3rd case  when target is greater than mid
            else
                low = mid + 1;
        }
        
        return -1;
    }
    
    private int binarySearchLast(int[] nums, int target){
        
        int low = 0;
        int high = nums.length-1;
        while(low <= high){
            
            int mid = low + (high-low)/2;
            
            //3 cases
            //1st when mid == target
            if(nums[mid] == target){
                //case 1 when mid is the last position
                if(mid == nums.length-1 || nums[mid+1] > nums[mid])
                    return mid;
                //case 2 when the last position is not the mid
                else 
                    low = mid + 1;
                
            }
            
            //2nd case when target is greater than mid
            else if(target > nums[mid])
                low = mid + 1;
            
            //3rd case  when target is less than mid
            else
                high = mid - 1;
        }
        
        return -1;
        
    }
}