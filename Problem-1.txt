//Problem - https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/
// Time Complexity : O(log(n))
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :Yes
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach
//used binary search method 


class Solution {
    public int[] searchRange(int[] nums, int target) {
        if(nums == null || nums.length ==0 ) return new int []{-1,-1};
        
        if(target > nums[nums.length-1] || target<nums[0] ) return new int[]{-1,-1};
        
        int first = binarysearchFirst(nums,target);
        if(first ==-1) return new int[]{-1,-1};
        int second=binarySearchSecond(nums,target);
        return new int[]{first,second};
        
    }
    //binary search to find first occurence of target
    private int binarysearchFirst(int[]nums,int target)
    {
        int low =0, high = nums.length-1;
        while(low<=high)
        {
            int mid= low+(high-low)/2;
            if(nums[mid] == target )
            {
                if(mid == 0 || nums[mid-1]<nums[mid])
                {
                    return mid;
                }
               else{
                   high = mid-1;
               }
            }
            else if(target<nums[mid])
            {
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        }
        return -1;
        
    }
    ////binary search to find second occurence of target
     private int binarySearchSecond(int[]nums,int target)
    {
        int low =0, high = nums.length-1;
        while(low<=high)
        {
            int mid= low+(high-low)/2;
            if(nums[mid] == target )
            {
                if(mid==nums.length-1 || nums[mid]<nums[mid+1])
                {
                    return mid;
                }
                else{
                    low = mid+1;
                }
            }
             else if(target<nums[mid])
            {
                 high = mid-1;
                 
            }
            else{
               low=mid+1;
            }
        }
        return -1;
    }
}