// Time Complexity : O(log n) 
// Space Complexity : O(1) - No extra space is used
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach

class Solution {
    public int findMin(int[] nums) {
        int left = 0;
        int right = nums.length -1;
        
        int min = Integer.MAX_VALUE;
        
        while(left <= right){
            int mid = left + (right - left)/2;
            if(nums[mid] < min){
                min = nums[mid];
            }
            
            if(nums[left] <= nums[mid]){
                if(nums[left] < min){
                    min = nums[left];
                }    
                left = mid + 1;
            }else{
                if(nums[mid] < min){
                    min = nums[mid];
                }    
                right = mid - 1;
            }
        }
        
        return min;
    }
}