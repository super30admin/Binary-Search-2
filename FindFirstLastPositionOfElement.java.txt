/******************************************************************************
Time Complexity - O(log N) + O(Log N)
*******************************************************************************/
public class Main
{
	public static void main(String[] args) {
	    Main m = new Main();
	    int arr[] = {1, 3, 5, 5, 5, 5, 67, 123, 125};
          int target = 125;
          if(arr.length == 0) return;
	    int start = 0;
	    int end =  arr.length - 1;
	    int firstposition = m.FindFirstPosition(arr, target, start, end);
	    int lastposition = m.FindLastPosition(arr, target, start, end);
	    int[] result = new int[]{firstposition,lastposition};
	    System.out.println(result[0]);
	}
	
	private int FindFirstPosition(int arr[], int target, int start, int end)
	{
	    int res = -1;
	    while(start <= end)
	    {
	        int mid = start + (end - start) / 2;
	        int element = arr[mid];
	        if(element == target) 
	        {
	            res = mid ;
	            end = mid - 1;
	        }
	        if(element < target)
	        {
	           start = mid + 1 ;
	        }
	        else if(element > target)
	        {
	            end = mid - 1;
	        }
	    }
	    return res;
	}
	
	private int FindLastPosition(int arr[], int target, int start, int end)
	{
	    int res = -1;
	    while(start <= end)
	    {
	        int mid = start + (end - start) / 2;
	        int element = arr[mid ];
	        if(element == target) 
	        {
	            res = mid ;
	            start = mid + 1;
	        }
	        if(element < target)
	        {
	           start = mid + 1 ;
	        }
	        else if(element > target)
	        {
	            end = mid - 1;
	        }
	    }
	    return res;
	}
}
