// Time Complexity : O(log n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : None


// Your code here along with comments explaining your approach

approach: Run two binary searches - one for the first occurrence and the second for the last occurrence. For the first occurrence,
we divide the array into two parts - elements which are < the target and elements which are >= the target and the start index should
be the left pointer as it will be one ahead of the right pointer when the loop breaks. Opposite for last index.

class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:

        if not nums:
            return [-1, -1]

        start, end = -1, -1

        l, r = 0, len(nums) - 1

        while l <= r:
            mid = (l + r) // 2
            if nums[mid] < target:
                l = mid + 1
            elif nums[mid] >= target:
                r = mid - 1

        if l <= len(nums) - 1 and nums[l] == target:
            start = l

        l, r = 0, len(nums) - 1
        while l <= r:
            mid = (l + r) // 2
            if nums[mid] <= target:
                l = mid + 1
            elif nums[mid] > target:
                r = mid - 1

        if r >= 0 and nums[r] == target:
            end = r

        return [start, end]


