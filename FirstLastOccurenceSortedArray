
// Time Complexity : O(log n)
// Space Complexity : No extra space

// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this :
Runtime Error Message:
java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 1
  at line 22, Solution.firstOccurence
  at line 3, Solution.searchRange
  at line 54, __DriverSolution__.__helper__
  at line 87, __Driver__.main
  
  - (changed OR conditon on line 39 & 62. It breaks if mid ==low is writte later as || condition is false then).

// Your code here along with comments explaining your approach

class Solution {
    public int[] searchRange(int[] nums, int target) {
        int first = firstOccurence(nums, target);
        
        if(first == -1) {
            return new int[] {-1, -1};
        }
        int last = lastOccurence(nums, target);
        return new int[] {first, last};
    }
    
    int firstOccurence(int nums[], int target) {
        
        int low = 0;
        int high = nums.length - 1;
        
        while (low <= high) {
            int mid = low + (high - low) /2;
            
            if (nums[mid] == target) {
                // compare the immediate leftmost number or if the number is first element(only 1 element in the list)
                if (mid == low || nums[mid-1] != target ) {
                    return mid;
                }
                high = mid - 1;
            } else if (nums[mid] > target) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
            
        }
        return -1;        
    }

    int lastOccurence(int nums[], int target) {
        
        int low = 0;
        int high = nums.length - 1;
        
        while (low <= high) {
            int mid = low + (high - low) /2;
            
            if (nums[mid] == target) {
                if ( mid == high || nums[mid+1] != target) {
                    return mid;
                }
                low = mid + 1;
            } else if (nums[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
            
        }
        return -1;        
    }

}
