// Time Complexity : O(log N)
// Space Complexity : O{1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No

//To find the range to perform the binary search , we first check if the mid element is the peak element. 
//If not, then we search in the direction of the element greater than the mid
//If the (mid-1)th element is greater then high=mid-1
//IF the (mid+1)th element is greater then low=mid+1
 def findPeakElement(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """

        low=0
        high=len(nums)
        mid=0

        while (low<=high):
        
            mid = low + (high-low)/2;

            if((mid == 0 or nums[mid - 1] <= nums[mid]) and (mid == len(nums) - 1 or nums[mid + 1] <= nums[mid])):
                break;
            
             
            if(mid > 0 and nums[mid - 1] > nums[mid]):
                high = mid - 1
 
         
            else:
                low = mid + 1
        
        return mid