//  Time Complexity :  O(log(n))
//  Space Complexity : O(1)
//  Did this code successfully run on Leetcode : Yes
//  Any problem you faced while coding this : No

class Solution {
    public int[] searchRange(int[] nums, int target) {

        if(nums == null || nums.length == 0) return new int[]{-1,-1};

        // We have to perform separate binary searches to find the first and last occurence of the element.
        int firstPosition = binarySearchFirst(nums, target);
        int lastPosition = binarySearchLast(nums, target);

        return new int[]{firstPosition, lastPosition};

    }

    private int binarySearchFirst(int[] nums, int target){

        int low = 0;
        int high = nums.length - 1;

        while(low <= high){
            int mid = low + (high - low) / 2;

            if(nums[mid] == target){
                // if the mid is the first element, so adding the condition mid == 0 to prevent it going out of bounds.
                // if middle element is greater than its previous element, it is the first occurece, if not move to the left.
                if(mid == 0 || nums[mid] > nums[mid-1]){
                    return mid;
                }
                else{
                    high = mid - 1;
                }
            }
            else if (nums[mid] > target){
                high = mid - 1;
            }
            else{
                low = mid + 1;
            }


        }
        return -1;

    }

    private int binarySearchLast(int[] nums, int target){

        int low = 0;
        int high = nums.length - 1;

        while(low <= high){
            int mid = low + (high - low) / 2;

            // if the mid is the last element, so adding the condition mid == 0 to prevent it going out of bounds.
            // if middle element is lesser than its next element, it is the last occurece, if not move to the right.
            if(nums[mid] == target){
                if(mid == nums.length - 1 || nums[mid] < nums[mid+1]){
                    return mid;
                }
                else{
                    low = mid + 1;
                }
            }
            else if (nums[mid] > target){
                high = mid - 1;
            }
            else{
                low = mid + 1;
            }


        }
        return -1;

    }


}
