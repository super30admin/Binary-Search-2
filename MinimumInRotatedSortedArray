//time complexity : O(log n)
//space complexity: O(1)
//successfully executed on leetcode

class MinimumInRotatedSortedArray {
    public int findMin(int[] nums) {
        int left=0;
        int right = nums.length-1;
        
        if(nums[left]<nums[right]){
            return nums[left];
        }
        if(nums.length==1){
            return nums[0];
        }
        while(left<=right){
        int mid = left+ (right-left)/2;
       
       //right sorted
        if(nums[left]>=nums[mid]){
            right= mid-1;
        }

        //left sorted
        else{
            left = mid+1;   
        }
        
        //finding inflection point & returning min element
        if(nums[mid]>nums[mid+1]){
                return nums[mid+1]; 
            }
        if(nums[mid-1]>nums[mid]){
                return nums[mid];
            }
        }
            
        return -1;
}
}
