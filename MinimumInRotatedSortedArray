//Time: O(log n)
//Space: O(N)
    
class Solution {
    public int findMin(int[] nums) {
        
        int low = 0;
        int high = nums.length - 1;
        
        while(low <= high){
            int mid = low + (high - low)/2;
            
            // mid = 0; if only one element or edge case lower or upper bound
            // find minimum - if (mid-1) > mid < (mid + 1)
            
            
            if((mid == 0 || nums[mid] < nums[mid - 1]) && (mid == nums.length - 1 || nums[mid] < nums[mid + 1])){
                return nums[mid];
            } else if(nums[mid] > nums[high]){
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        
        return -1;
    }
}
