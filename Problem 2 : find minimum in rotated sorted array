#time complexity: O(log n)
#space complexity: O(1)
#did this code run on leetcode: yes
class Solution:
    def findMin(self, nums: List[int]) -> int:
        n = len(nums)
        if n==0: return -1
        low,high = 0, n-1       
        while(low<=high):
            if nums[low]<=nums[high]:
                return nums[low]
            mid = low + (high-low)//2
            if (mid == 0 or nums[mid]<nums[mid-1]) and (mid==n-1 or nums[mid]<nums[mid+1]):
                return nums[mid]
            elif nums[low]<=nums[mid]:
                low = mid+1
            else: high = mid-1
        if nums[low]<nums[high]:
                return nums[low]
        return -1
            
