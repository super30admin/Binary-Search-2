//time complexity: O(logn)
//space complexity: O(1)
//successfully executed on leetcode

class FirstAndLastPositionOfElementInSortedArray {
       
    public int[] searchRange(int[] nums, int target) {
    
         int start =0;
        int end = nums.length-1;

        if(nums==null || nums.length==0){
            return new int[]{-1,-1};
        }
        if(target<nums[start] || target>nums[end]){
          return new int[]{-1,-1};
        }
        if(nums[start]== nums[end]){
            return new int[]{start,end};
        }
    

        int firstIndex= binarySearchFirst( nums,  target,  start,  end); 
        if(firstIndex==-1){
            return new int[]{-1,-1};
        }
        int secondIndex= binarySearchSecond( nums,  target,  firstIndex,  end); 
        return new int[]{firstIndex, secondIndex};

    }

    //binary search for first index
    public int  binarySearchFirst(int nums[], int target, int start, int end){
        while(start<=end){
            int mid = start+ (end-start)/2;
            if(nums[mid]== target ){
                if(mid==0 || nums[mid]>nums[mid-1]){
                   return mid;  
                }
                else {
                    end= mid-1;
                }

            }
            else if(nums[mid]> target){
                end =mid-1;
            }
            else{
                start= mid+1;
            }
           
        }
         return -1;
    }

    //binary search for last index
        public int  binarySearchSecond(int nums[], int target, int start, int end){
          int len=nums.length-1;
        while(start<=end){
            int mid = start+ (end-start)/2;
          
            if(nums[mid]==target){
                if(mid== len|| nums[mid]<nums[mid+1]) {
                    return mid;
                }
                else{
                    start= mid+1; 
                }

            }
            else if(nums[mid]> target){
                end =mid-1;
            }
            else{
                start= mid+1;
            }
         
            }
               return -1;
        }
               
    }
