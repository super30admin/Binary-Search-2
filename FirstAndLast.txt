// Time Complexity : O(n)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode : No, can't submit Brute Force solution
// Any problem you faced while coding this : Unable to figure out the O(log n) solution


class Solution {
    public int[] searchRange(int[] nums, int target) {
    /*    
        int low = 0;
        int high = nums.length - 1;
        int[] out = new int [2];
    //    int first = 0;
     //   int last = 0;
        boolean firstOccur = true;
        
        while(low <= high){
            
            int mid = low + (high - low)/2;
            
            if (nums[mid] == target){
                
                if (mid == low || nums[mid - 1 ] != target){
                    return mid;
                }  
                else {
                    
                    high = mid -1;
                    
                }
                
                if (mid == high || nums[mid + 1 ] != target){
                    return mid;
                }
                else{
                    
                    low = mid + 1;
                }
                
            }
            else if (nums[mid] < target){
                
                low = mid + 1;
                
            }
            else{
                
                high = mid - 1;
            }
            
            out[0]=out[1] = -1;
            
            return out;
        }
        
    }
    
    */
        
// Brute Force -
    
    
        int i = 0;
        int [] out = new int [2];
        
        out[0] = out[1] = -1;
        
        while (i < nums.length ){
            
            if (nums[i] != target){
                
                continue;
                
            }   
            
            if (out[0] == -1){
                
                out[0] = i;
            }
            
            out[1] = i;
            
        }
        
         if (out[0]!= -1){
             
              return out;
            
         }
        else{
             out[0]=out[1] = -1;
             return out;
        }
    }
    
}