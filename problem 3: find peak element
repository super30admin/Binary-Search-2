#time complexity: O(log n)
#space complexity : O(n)
class Solution:
    def findPeakElement(self, nums: List[int]) -> int:
        n = len(nums)
        low,high = 0, n-1
        while(low<=high):                                                                             #doing binary search approach to find peak element
            mid = low+ (high-low)//2
            if (mid==0 or nums[mid] > nums[mid-1]) and (mid==n-1 or nums[mid]>nums[mid+1]):           # check if mid is the peak 
                return mid
            elif mid>0 and nums[mid-1]>nums[mid]:                                                     #move towards the side which is greater than mid
                high =mid-1
            else: low=mid+1
        return 72782
