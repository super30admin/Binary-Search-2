// Time Complexity : O(long)
//Space Complexity : O(1)

class Solution 
{
    public int[] searchRange(int[] nums, int target) 
    {
        if(nums==null || nums.length==0)
        {
            return new int[]{-1,-1};
        }

        if(target <nums[0] && target>nums[nums.length-1])
        {
            return new int[]{-1,-1};
        }
        int a = binarySearchLeft(nums,target);
        if(a==-1)
        {
            return new int[]{-1,-1};
        }
        int b = binarySearchRight(nums,target);
        
        return new int[]{a,b};
        
    }
    public static int binarySearchLeft(int[] nums, int target)
    {
        int low = 0;
        int high = nums.length-1;
        
        while(low<=high)
        {
            int mid = low + (high - low)/2;
            if(nums[mid]==target)
            {
                if(mid == 0 || nums[mid-1]!=nums[mid])
                {
                    return mid;
                }else
                {
                    high = mid -1;
                }
            }else if(target>nums[mid])
            {
                low = mid + 1;
            }else
            {
                high = mid - 1;
            }
        }
        
        return -1;
    }
    
    public static int binarySearchRight(int[] nums, int target)
    {
        int low = 0;
        int high = nums.length-1;
        
        while(low<=high)
        {
            int mid = low + (high - low)/2;
            if(nums[mid]==target)
            {
                if(mid == nums.length-1 || nums[mid+1]!=nums[mid])
                {
                    return mid;
                }else
                {
                    low = mid+1;
                }
            }else if(target>nums[mid])
            {
                low = mid + 1;
            }else
            {
                high = mid - 1;
            }
        }
        
        return -1;
    }
}