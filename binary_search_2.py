# -*- coding: utf-8 -*-
"""Binary Search 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g9G31ZXHOS2uby-vWxfdrRc23z9Q8iXx

Find First and Last Position of Element in Sorted Array
"""

nums = []
target = 1
output = [-1,-1]
low = 0
high = len(nums) - 1
def findleftindex(nums,target):
  index = -1
  left , right = 0, len(nums) - 1
  while left <= right:
    mid = (left + right) // 2
    if nums[mid] == target:
      index = mid
      right = mid - 1
    elif nums[mid] > target:
      right = mid - 1
    else:
      left = mid + 1
  return index
def findrightindex(nums,target):
  index = -1
  left , right = 0, len(nums) - 1
  while left <= right:
    mid = (left + right) // 2
    if nums[mid] == target:
      index = mid
      left = mid + 1
    elif nums[mid] > target:
      right = mid - 1
    else:
      left = mid + 1
  return index

output[0] = findleftindex(nums , target)
output[1] = findrightindex(nums , target)
print(output)

"""Find Minimum in Rotated Sorted Array"""

nums = [3,4,5,6,7,-1,0,1,2]
first = 0
last = len(nums)-1
while nums[first] > nums[last]:
    middle = (first+last) // 2
    if nums[middle] <nums[last]:
        last = middle
    else:
        first = middle + 1
print(nums[first])

"""Find Peak Element"""

nums = [1,2,1,3,5,6,4]
left = 0
right = len(nums) - 1
while left < right:
    mid = (left + right) // 2
    if nums[mid] > nums[mid + 1]:
        right = mid
    else: 
        left = mid + 1
print(left)