// Time Complexity : o(log n)
// Space Complexity : o(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no


// Your code here along with comments explaining your approach
/*
*  move towards the bigger neighbor
*
* */

class Solution {
    public int findPeakElement(int[] nums) {

        int n = nums.length;
        if(n ==1 )
        return 0;
        int low = 0;
        int high = n -1 ;

        while(low<=high){
            int mid = low + ( high -low)/2;
            if( (mid == 0 || nums[mid] > nums[mid -1]) && ( mid == n -1 ||nums[mid] > nums[mid+1])){
                return mid;
            }

            else if( mid > 0 && nums[mid - 1 ] > nums[mid+1])
            {
                high = mid -1;
            } else {
                low = mid+1;
            }
        }
        return -1;
    }

}